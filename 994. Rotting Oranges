class Solution {
     // DFS approach  
    public int orangesRotting(int[][] grid) {
        
          if(grid == null || grid.length == 0) return -1;
        
        int m = grid.length;
        int n = grid[0].length;
        
        int time=2;
        for(int row=0;row<grid.length;row++){
            for(int col=0;col<grid[0].length;col++){
                if(grid[row][col] == 2){
                    rottingStarted(row,col,grid,time);   
                }
            }
        }
        for(int row=0;row<grid.length;row++){
            for(int col=0;col<grid[0].length;col++){
                if(grid[row][col] == 1) return -1;
                time=Math.max(time, grid[row][col]);
            }
        }
        
        return time-2;
    }
    
    public void rottingStarted(int row, int col,int[][] grid,int time){
        
        if(row<0 || row >= grid.length || col<0 || col >=grid[0].length || 
           grid[row][col] == 0 ||
           (grid[row][col]>1 && grid[row][col] < time))     
            return;
        
        grid[row][col] =time;
        
        
        rottingStarted(row-1,col,grid,time+1);
        rottingStarted(row,col+1,grid,time+1);
        rottingStarted(row+1,col,grid,time+1);
        rottingStarted(row,col-1,grid,time+1);
        
    }
    
    
    
}
